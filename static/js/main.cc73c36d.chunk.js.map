{"version":3,"sources":["assets/beads/red/bead-red.png","assets/beads/blue/bead-blue.png","assets/beads/green/bead-green.png","assets/beads/red/bead-red-flipped.png","assets/beads/blue/bead-blue-flipped.png","assets/beads/green/bead-green-flipped.png","utils/constants.ts","features/board/boardSlice.ts","features/beads/beadsSlice.ts","features/beads/Bead.tsx","features/beads/BeadsSidebar.tsx","features/board/BoardSquare.tsx","app/theme.ts","features/player/playerSlice.ts","features/board/Board.tsx","features/headerBar/HeaderBar.tsx","features/player/Player.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","BOARD_SIZES","BEADS_AMOUNT","FLIPPED_BEADS","BEAD","none","Red","beadRed","RedFlipped","beadRedFlipped","Blue","beadBlue","BlueFlipped","beadBlueFlipped","Green","beadGreen","GreenFlipped","beadGreenFlipped","BEADS","DIRECTIONS","row","col","initialState","squares","size","Small","boardSlice","createSlice","name","reducers","setSquareState","state","action","payload","id","selectedColor","flipSquare","setBoardSize","newSquares","push","actions","getBoardSize","board","getBoardGrid","grid","i","j","getSquareState","length","reduce","result","d","next","isValid","isOpen","amounts","beadsSlice","selectColor","extraReducers","builder","addCase","forEach","bead","getSelectedColor","beads","getBeadAmount","getBeadsSidebar","Object","entries","entity","Array","fill","useStyles","makeStyles","createStyles","width","small","SQUARE_SIZE","opacity","selected","Bead","React","memo","props","classes","useSelector","isSelected","src","className","clsx","alt","button","padding","BeadsSidebar","dispatch","useDispatch","Paper","Grid","container","direction","justify","alignItems","map","index","item","xs","key","onClick","IconButton","theme","square","cursor","textAlign","height","background","BoardSquare","beadAmount","Button","variant","event","disabled","createMuiTheme","palette","secondary","light","main","dark","contrastText","turn","color","playerSlice","primary","getPlayer","player","getPlayerColor","paper","border","borderRadius","spacing","Board","rowIndex","colIndex","menuButton","marginRight","title","flexGrow","HeaderBar","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","handleClick","AppBar","position","Toolbar","edge","aria-label","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","onClose","MenuItem","fontWeight","blue","red","Player","Typography","App","useEffect","ThemeProvider","store","configureStore","reducer","beadsReducer","boardReducer","playerReducer","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc73c36d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bead-red.e18420d6.png\";","module.exports = __webpack_public_path__ + \"static/media/bead-blue.b24fcca5.png\";","module.exports = __webpack_public_path__ + \"static/media/bead-green.e8d39c17.png\";","module.exports = __webpack_public_path__ + \"static/media/bead-red-flipped.4638fa0d.png\";","module.exports = __webpack_public_path__ + \"static/media/bead-blue-flipped.9bc166ee.png\";","module.exports = __webpack_public_path__ + \"static/media/bead-green-flipped.1522709d.png\";","import beadRed from '../assets/beads/red/bead-red.png'\nimport beadBlue from '../assets/beads/blue/bead-blue.png'\nimport beadGreen from '../assets/beads/green/bead-green.png'\nimport beadRedFlipped from '../assets/beads/red/bead-red-flipped.png'\nimport beadBlueFlipped from '../assets/beads/blue/bead-blue-flipped.png'\nimport beadGreenFlipped from '../assets/beads/green/bead-green-flipped.png'\n\nexport const BEAD = {\n  none: '',\n  Red: beadRed,\n  RedFlipped: beadRedFlipped,\n  Blue: beadBlue,\n  BlueFlipped: beadBlueFlipped,\n  Green: beadGreen,\n  GreenFlipped: beadGreenFlipped,\n}\nexport const SQUARE_SIZE: number = 62\nexport const BEADS: BeadType[] = ['Red', 'Blue', 'Green']\nexport enum BOARD_SIZES {\n  'Small' = 6,\n  'Medium' = 12,\n}\nexport enum BEADS_AMOUNT {\n  'Small' = 4,\n  'Medium' = 12,\n}\nexport enum FLIPPED_BEADS {\n  'Red' = 'RedFlipped',\n  'Blue' = 'BlueFlipped',\n  'Green' = 'GreenFlipped',\n  'RedFlipped' = 'RedFlipped',\n  'BlueFlipped' = 'BlueFlipped',\n  'GreenFlipped' = 'GreenFlipped',\n  'none' = 'none',\n}\nexport const DIRECTIONS: GridType[] = [\n  { row: -1, col: 0 },\n  { row: 0, col: -1 },\n  { row: 0, col: 1 },\n  { row: 1, col: 0 },\n]\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux'\nimport { RootState } from '../../app/store'\nimport { BOARD_SIZES, DIRECTIONS, FLIPPED_BEADS } from '../../utils/constants'\n\ninterface BoardState {\n  squares: SquareType\n  size: number\n}\n\nconst initialState: BoardState = {\n  squares: [],\n  size: BOARD_SIZES.Small,\n}\n\ninterface SquareStateAction {\n  id: GridType\n  selectedColor: BeadType\n}\n\nconst checkSquareState = (id: GridType) => ({ board }: RootState) => {\n  const dispatch = useDispatch()\n  const { row, col } = id\n  if (board.squares[row][col]) {\n    if (\n      row > 0 &&\n      col > 0 &&\n      board.squares[row - 1][col] !== 'none' &&\n      board.squares[row][col - 1] !== 'none'\n    ) {\n      dispatch(flipSquare(id))\n    }\n  }\n}\n\nexport const boardSlice = createSlice({\n  name: 'board',\n  initialState,\n  reducers: {\n    setSquareState: (state, action: PayloadAction<SquareStateAction>) => {\n      const { id, selectedColor } = action.payload\n      state.squares[id.row][id.col] = selectedColor\n      checkSquareState(id)\n    },\n    flipSquare: (state, action: PayloadAction<GridType>) => {\n      const { row, col } = action.payload\n      state.squares[row][col] += 'Flipped'\n    },\n    setBoardSize: (state, action: PayloadAction<BoardType>) => {\n      state.size = BOARD_SIZES[action.payload]\n      const newSquares: SquareType = []\n      for (let row = 0; row < BOARD_SIZES[action.payload]; row++) {\n        newSquares.push([])\n        for (let col = 0; col < BOARD_SIZES[action.payload]; col++) {\n          newSquares[row].push('none')\n        }\n      }\n      state.squares = newSquares\n    },\n  },\n})\n\nexport const { setSquareState, flipSquare, setBoardSize } = boardSlice.actions\n\nexport const getBoardSize = ({ board }: RootState) => board.size\nexport const getBoardGrid = ({ board }: RootState) => {\n  const grid: number[][] = []\n  for (let i = 0; i < board.size; i++) {\n    grid.push([])\n    for (let j = 0; j < board.size; j++) {\n      grid[i].push(j + 1 + i * board.size)\n    }\n  }\n  return grid\n}\n\nconst isValid = ({ row, col }: GridType, size: number): boolean =>\n  row >= 0 && col >= 0 && row < size && col < size\n\nconst isOpen = (board: BoardState, id: GridType): boolean =>\n  DIRECTIONS.reduce((result: boolean, d: GridType) => {\n    const next = { row: d.row + id.row, col: d.col + id.col }\n    if (isValid(next, board.size) && board.squares[next.row][next.col] === 'none') result = true\n    return result\n  }, false)\n\nexport const getSquareState = (id: GridType) => ({ board }: RootState): BeadType =>\n  board.squares.length > 0\n    ? isOpen(board, id)\n      ? board.squares[id.row][id.col]\n      : FLIPPED_BEADS[board.squares[id.row][id.col]]\n    : 'none'\n\nexport default boardSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport { setBoardSize, setSquareState } from '../board/boardSlice'\nimport { BEADS, BEADS_AMOUNT } from '../../utils/constants'\n\ninterface BeadsState {\n  amounts: AmountType\n  selectedColor: BeadType\n}\n\nconst initialState: BeadsState = {\n  amounts: {},\n  selectedColor: 'Red',\n}\n\nexport const beadsSlice = createSlice({\n  name: 'beads',\n  initialState,\n  reducers: {\n    selectColor: (state, action: PayloadAction<BeadType>) => {\n      state.selectedColor = action.payload\n    },\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(setBoardSize, (state, action) => {\n        BEADS.forEach(bead => {\n          state.amounts[bead] = BEADS_AMOUNT[action.payload]\n        })\n        state.selectedColor = initialState.selectedColor\n      })\n      .addCase(setSquareState, (state, action) => {\n        state.amounts[state.selectedColor] -= 1\n        if (state.amounts[state.selectedColor] === 0) {\n          BEADS.forEach(bead => {\n            if (state.amounts[state.selectedColor] === 0 && state.amounts[bead] > 0) {\n              state.selectedColor = bead\n            }\n          })\n        }\n      })\n  },\n})\n\nexport const { selectColor } = beadsSlice.actions\n\nexport const getSelectedColor = ({ beads }: RootState) => beads.selectedColor\nexport const getBeadAmount = ({ beads }: RootState) => beads.amounts\nexport const getBeadsSidebar = ({ beads }: RootState) => {\n  return (Object.entries(beads.amounts) as [BeadType, number][]).reduce(\n    (result: BeadType[], entity: [BeadType, number]) => {\n      result.push(...Array(entity[1]).fill(entity[0]))\n      return result\n    },\n    []\n  )\n}\n\nexport default beadsSlice.reducer\n","import React from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { BEAD, SQUARE_SIZE } from '../../utils/constants'\nimport { useSelector } from 'react-redux'\nimport { getSelectedColor } from './beadsSlice'\n\ninterface StyledProps {\n  small?: boolean\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    bead: {\n      width: ({ small }: StyledProps) => (small ? SQUARE_SIZE / 2 : SQUARE_SIZE),\n      opacity: 0.6,\n    },\n    selected: {\n      opacity: 1,\n    },\n  })\n)\n\ninterface BeadProps {\n  state: BeadType\n  selected?: boolean\n  small?: boolean\n}\n\nexport const Bead = React.memo((props: BeadProps) => {\n  const { state, selected, small } = props\n  const classes = useStyles({ small })\n  const selectedColor = useSelector(getSelectedColor)\n  const isSelected = selected || selectedColor === state\n\n  if (state === 'none') {\n    return <div />\n  } else {\n    return (\n      <img\n        src={BEAD[state]}\n        className={clsx(classes.bead, isSelected && classes.selected)}\n        alt={state}\n      />\n    )\n  }\n})\n","import React from 'react'\nimport { Grid, IconButton, Paper } from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getBeadsSidebar, selectColor } from './beadsSlice'\nimport { Bead } from './Bead'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    button: {\n      padding: 0,\n    },\n  })\n)\n\nexport const BeadsSidebar = React.memo(() => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const beads = useSelector(getBeadsSidebar)\n\n  return (\n    <Paper>\n      <Grid container direction='column' justify='center' alignItems='center'>\n        {beads.map((bead, index) => (\n          <Grid item xs={6} key={index} onClick={() => dispatch(selectColor(bead))}>\n            <IconButton className={classes.button}>\n              <Bead state={bead} small />\n            </IconButton>\n          </Grid>\n        ))}\n      </Grid>\n    </Paper>\n  )\n})\n","import React from 'react'\nimport { Button } from '@material-ui/core'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getSquareState, setSquareState } from './boardSlice'\nimport { BEAD, SQUARE_SIZE } from '../../utils/constants'\nimport { Bead } from '../beads/Bead'\nimport { getBeadAmount, getSelectedColor } from '../beads/beadsSlice'\n\ninterface StyledProps {\n  selectedColor: BeadType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    square: {\n      cursor: 'pointer',\n      textAlign: 'center',\n      width: SQUARE_SIZE,\n      height: SQUARE_SIZE + 2,\n      '&:hover': {\n        background: ({ selectedColor }: StyledProps) =>\n          `url(${BEAD[selectedColor]}) 0% 0% / ${SQUARE_SIZE}px ${SQUARE_SIZE}px no-repeat`,\n      },\n    },\n  })\n)\n\ninterface BoardSquareProps {\n  id: GridType\n}\n\nexport const BoardSquare = React.memo((props: BoardSquareProps) => {\n  const { id } = props\n  const dispatch = useDispatch()\n  const selectedColor = useSelector(getSelectedColor)\n  const state = useSelector(getSquareState(id))\n  const classes = useStyles({ selectedColor })\n  const beadAmount = useSelector(getBeadAmount)\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    const newSquareState = { id: id, selectedColor: selectedColor }\n    dispatch(setSquareState(newSquareState))\n  }\n\n  return (\n    <Button\n      variant='outlined'\n      size='small'\n      className={classes.square}\n      onClick={handleClick}\n      disabled={beadAmount[selectedColor] === 0 || state !== 'none'}\n    >\n      <Bead state={state} selected />\n    </Button>\n  )\n})\n","import { createMuiTheme } from \"@material-ui/core/styles\"\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      light: '#ff4569',\n      main: '#ff1744',\n      dark: '#b2102f',\n      contrastText: '#000',\n    },\n  },\n})\n\nexport default theme","import { createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport { setBoardSize, setSquareState } from '../board/boardSlice'\nimport theme from '../../app/theme'\n\ninterface PlayerState {\n  turn: string\n  color: string\n}\n\nconst initialState: PlayerState = {\n  turn: 'Player 1',\n  color: theme.palette.secondary.main,\n}\n\nexport const playerSlice = createSlice({\n  name: 'player',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(setBoardSize, (state, action) => {\n        state.turn = initialState.turn\n        state.color = initialState.color\n      })\n      .addCase(setSquareState, (state, action) => {\n        if (state.turn === 'Player 1') {\n          state.turn = 'Player 2'\n          state.color = theme.palette.primary.main\n        } else {\n          state.turn = 'Player 1'\n          state.color = theme.palette.secondary.main\n        }\n      })\n  },\n})\n\nexport const getPlayer = ({ player }: RootState) => player\nexport const getPlayerColor = ({ player }: RootState) => player.color\n\nexport default playerSlice.reducer\n","import React from 'react'\nimport { Grid, Paper } from '@material-ui/core'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { useSelector } from 'react-redux'\nimport { getBoardGrid, getBoardSize } from './boardSlice'\nimport { BoardSquare } from './BoardSquare'\nimport { SQUARE_SIZE } from '../../utils/constants'\nimport { getPlayerColor } from '../player/playerSlice'\n\ninterface StyledProps {\n  size: number\n  color: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      width: ({ size }: StyledProps) => size * (SQUARE_SIZE + 2),\n      border: ({ color }: StyledProps) => `solid 2px ${color}`,\n      borderRadius: theme.spacing(1),\n    },\n  })\n)\n\nexport const Board = React.memo(() => {\n  const size = useSelector(getBoardSize)\n  const color = useSelector(getPlayerColor)\n  const classes = useStyles({ size, color })\n  const grid = useSelector(getBoardGrid)\n\n  return (\n    <Paper className={classes.paper}>\n      {grid.map((row, rowIndex) => (\n        <Grid container key={rowIndex} justify='center' alignItems='center'>\n          {row.map((col, colIndex) => (\n            <Grid item key={colIndex}>\n              <BoardSquare id={{ row: rowIndex, col: colIndex }} />\n            </Grid>\n          ))}\n        </Grid>\n      ))}\n    </Paper>\n  )\n})\n","import React from 'react'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { AppBar, Toolbar, IconButton, MenuItem, Menu } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport { useDispatch } from 'react-redux'\nimport { setBoardSize } from '../board/boardSlice'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n)\n\nexport const HeaderBar = () => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n  const open = Boolean(anchorEl)\n\n  const handleMenu = (event: React.MouseEvent<HTMLElement>): void => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = (): void => {\n    setAnchorEl(null)\n  }\n\n  const handleClick = (size: BoardType): void => {\n    dispatch(setBoardSize(size))\n    handleClose()\n  }\n\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <IconButton\n          edge='start'\n          className={classes.menuButton}\n          color='inherit'\n          aria-label='menu'\n          aria-controls='menu-appbar'\n          aria-haspopup='true'\n          onClick={handleMenu}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Menu id='menu-appbar' anchorEl={anchorEl} keepMounted open={open} onClose={handleClose}>\n          <MenuItem onClick={() => handleClick('Small')}>Small</MenuItem>\n          <MenuItem onClick={() => handleClick('Medium')}>Medium</MenuItem>\n        </Menu>\n      </Toolbar>\n    </AppBar>\n  )\n}\n","import React from 'react'\nimport { Typography } from '@material-ui/core'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { useSelector } from 'react-redux'\nimport { getPlayer } from './playerSlice'\n\ninterface StyledProps {\n  color: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    player: {\n      textAlign: 'center',\n      fontWeight: 'bold',\n      color: ({ color }: StyledProps) => color,\n    },\n    blue: {\n      color: theme.palette.primary.main,\n    },\n    red: {\n      color: theme.palette.secondary.main,\n    },\n  })\n)\n\nexport const Player = () => {\n  const { color, turn } = useSelector(getPlayer)\n  const classes = useStyles({ color })\n\n  return (\n    <Typography className={classes.player} variant='h6'>\n      {turn}\n    </Typography>\n  )\n}\n","import React from 'react'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport { BeadsSidebar, Board, HeaderBar, Player } from '../features'\nimport theme from './theme'\nimport { Grid } from '@material-ui/core'\nimport { setBoardSize } from '../features/board/boardSlice'\nimport { useDispatch } from 'react-redux'\n\nconst App = () => {\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    dispatch(setBoardSize('Small'))\n  }, [dispatch])\n  return (\n    <ThemeProvider theme={theme}>\n      <HeaderBar />\n      <Grid container direction='column' justify='center' alignItems='center' spacing={1}>\n        <Grid item>\n          <Player />\n        </Grid>\n        <Grid item>\n          <Grid container spacing={1}>\n            <Grid item>\n              <BeadsSidebar />\n            </Grid>\n            <Grid item>\n              <Board />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport beadsReducer from '../features/beads/beadsSlice'\nimport boardReducer from '../features/board/boardSlice'\nimport playerReducer from '../features/player/playerSlice'\n\nexport const store = configureStore({\n  reducer: {\n    beads: beadsReducer,\n    board: boardReducer,\n    player: playerReducer\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}